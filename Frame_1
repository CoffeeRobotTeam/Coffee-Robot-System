#ifndef FRAME_H
#define FRAME_H

#include <vector>
#include <iostream>
#include <Eigen/Dense>
using namespace std;
using namespace Eigen;
class Point
{
	private:
		string name;
	    double x,y;
	public: 
		Point(double xx=0,double yy=0):x(xx),y(yy){} 
	    Point(string nam,double xx=0,double yy=0):name(nam),x(xx),y(yy){}
		Point(Point &p):name(p.name),x(p.x),y(p.y){}
		void  copyto(Point &p);
		inline double getx(void)
		{
			return this->x;
		}
		inline double gety(void)
		{
			return this->y;
		}
		string getname(void);
};

class Frame
{
	private:
		string name;
	    Vector2d vector_X;
	    Vector2d vector_Y;
	    Point origin;
	public:
	   
	    Frame(string nam,Vector2d &vx,Vector2d &vy,Point &oripoint):name(nam),origin(oripoint)
	    {    	
	    	vector_X=vx/(sqrt(vx.transpose()*vx));
	    	vector_Y=vy/(sqrt(vy.transpose()*vy));
		}
		Frame(Frame &fr):name(fr.name),vector_X(fr.vector_X),vector_Y(fr.vector_Y),origin(fr.origin){}
		
		string getname(void)
		{
			return this->name;
		}
		inline Vector2d getVector_X(void)
		{
			return this->vector_X;
		}
		inline Vector2d getVector_Y(void)
		{
			return this->vector_Y;
		}
		inline Point getorigin(void)
		{
			return this->origin;
		}

};
class JointFrame
{
	private:
		double theta1,theta2;
	public:
		JointFrame(double t1=0,double t2=0):theta1(t1),theta2(t2){}
		inline double gettheta1(void)
		{
			return this->theta1; 
		}
		inline double gettheta2(void)
		{
			return this->theta2; 
		}
			
};
#endif
